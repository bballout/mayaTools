def addInbetweenShape():
    import pymel.core as pm

    #Adds InBetweens for properly named and connected shapes
    objects = pm.ls(sl = 1)
    base = str(objects.pop(-1))
    
    baseInputs = pm.listHistory(base)
    
    for b in baseInputs:
        if b.nodeType() == 'blendShape':
            blShape = b
    
    targets = blShape.getTarget()
    
    for o in objects:
        nameList = o.split('_')
        ibSuffix = nameList.pop()
        ibTarget = '_'.join(nameList)
        ibName = str(o)
        ibWeight = int(ibSuffix.strip('IB')) * .01
        
        print ibWeight
        print ibTarget
        ibIndex = targets.index(ibTarget)
        
        print ibIndex
    pm.blendShape(str(blShape), e = 1, ib = 1,tc = False, t = (base, ibIndex, ibName, ibWeight))
    
    
addInbetweenShape()