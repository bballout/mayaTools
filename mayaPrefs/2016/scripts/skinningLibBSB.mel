global proc string getSkinClusterFromPoint (string $point){	string $buffer[];	$numTokens01 = `tokenize $point "." $buffer`;	string $tranformNode = $buffer[0];	string $shapeNode[] = `listRelatives -type shape $tranformNode`;	string $history[] = `listHistory -pdo 1 -il 2 $shapeNode[0]`;	string $skincluster;		for ($node in $history)	{		if(nodeType($node) == "skinCluster")		{			$skincluster = $node;		}	}	return $skincluster;}global proc string getSkinClusterFromObject (string $mesh){	string $tranformNode = $mesh;	string $shapeNode[] = `listRelatives -type shape $tranformNode`;	string $history[] = `listHistory -pdo 1 -il 2 $shapeNode[0]`;	string $skincluster;		for ($node in $history)	{		if(nodeType($node) == "skinCluster")		{			$skincluster = $node;		}	}	return $skincluster;}global proc string[] getInfluencesFromSkinCluster (string $skincluster){	string $joints[] = `skinCluster -q -inf $skincluster`;	return $joints;}global proc string[] getInfluencesFromPoints (string $points[]){	string $influenceJoints[];		for ($point in $points)	{		string $skincluster = `getSkinClusterFromPoint $point`;		string $joints[] = `getInfluencesFromSkinCluster $skincluster`;				for ($joint in $joints)		{			float $value = `skinPercent -transform $joint -query $skincluster $point`;			if ($value > 0)			{				string $testJoints[];				$testJoints[0] = $joint;				appendStringArray($influenceJoints,$testJoints,1);			}		}	}	string $optList[] = stringArrayRemoveDuplicates($influenceJoints);	return $optList;}global proc string[] listUnlockdJoints (string $skincluster){	string $joints[] = `getInfluencesFromSkinCluster $skincluster`;	string $unlockedJoints[];	for($joint in $joints)	{		if(`skinCluster -inf $joint -q -lw $skincluster` == 0)		{			string $unlockedJoint[];			$unlockedJoint[0] = $joint;			appendStringArray ($unlockedJoints, $unlockedJoint, 1);		}	}		return $unlockedJoints;}global proc string[] listInfluencedVerts (string $skincluster, string $influence){	string $shape[] = `skinCluster -q -geometry $skincluster`;	string $mesh[] = `listRelatives -p $shape[0]`;	string $vertsCon[] = `polyListComponentConversion -tv  $mesh[0]`;	select $vertsCon;	string $verts[] = `ls -fl -sl`;	select -cl;		for ($vert in $verts)	{		//print $vert;				float $value = `skinPercent -transform $influence -query $skincluster $vert`;		if ($value > 0)		{			select -add $vert;		}	}		string $vertSel[] = `ls -fl -sl`;	return $vertSel;}global proc string[] listAllSkinclusters (){	string $skinclusters[] = `ls -type skinCluster`;	return $skinclusters;}global proc float influenceVal (string $vert, string $joint){	string $sel[] = `ls -fl -sl`;	string $skinclustter = `getSkinClusterFromPoint $vert`;	float $value = `skinPercent -transform $joint -query $skinclustter  $vert`;	return $value;}global proc tranferInfluences (string $sourceMesh, string $targetMesh){	string $sourceSkin = `getSkinClusterFromObject $sourceMesh`;	string $targetSkin = `getSkinClusterFromObject $targetMesh`;		string $sourceJoints[] = `getInfluencesFromSkinCluster $sourceSkin`;	string $targetJoints[] = `getInfluencesFromSkinCluster $targetSkin`;		for ($targetJoint in $targetJoints)	{		for ($sourceJoint in $sourceJoints)		{			if($targetJoint != $sourceJoint)			{				if (catchQuiet (`skinCluster -e -lw true -wt 0 -ai $sourceJoint $targetSkin`))				{					print ($targetJoint + " is already an influence.\n");				}								else				{					print ((($targetJoint + " added to ") +  $targetMesh) +"\n");				}				}		}	}} global proc copyWeight (string $sourcePoint){	string $sel[] = `ls -fl -sl`;			string $targetPoint = $sel[0];	string $targetPoints[] = $sel;	string $sourceSkin = `getSkinClusterFromPoint $sourcePoint`;	string $targetSkin = `getSkinClusterFromPoint $targetPoint`;	string $sourceJoints[] = `skinCluster -q -inf $sourceSkin`;	string $targetJoints[] = `skinCluster -q -inf $targetSkin`;	int $numSourceJoints = `size $sourceJoints`;	int $numtTargetJoints = `size $targetJoints`;	  	for ($joint in $targetJoints)		{		setAttr ($joint + ".liw") 0;	}	for ($eachSourceJoint in $sourceJoints)	{		float $value = `skinPercent -transform $eachSourceJoint -query $sourceSkin $sourcePoint`;		if($value > 0)		{			for ($eachTargetJoint in $targetJoints)			{				if($eachTargetJoint == $eachSourceJoint)				{					for ($point in $targetPoints)					{						skinPercent -transformValue $eachTargetJoint $value $targetSkin $point;						setAttr ($eachSourceJoint + ".liw") 1;					}				}			}		}	}	}global proc averageWieghtFromSelection (string $sourceVerts[]){	string $targetVerts[] = `ls -fl -sl`;	string $skinCluster = `getSkinClusterFromPoint $targetVerts[0]`;	string $joints[] = `skinCluster -q -inf $skinCluster`;	int $numJoints = `size $joints`;	int $vertCount = `size($sourceVerts)`;		for ($joint in $joints)	{		setAttr ($joint + ".liw") 0;	}			for ($joint in $joints)	{		float $weightValue = 0;		float $value = 0;				string $point;		for($vert in $sourceVerts)		{			$value = `skinPercent -transform $joint -query $skinCluster $vert`;			$weightValue += $value;		}				float $averageWeight = $weightValue / $vertCount;				for($vert in $targetVerts)		{			skinPercent -transformValue $joint $averageWeight $skinCluster $vert;		}				setAttr ($joint + ".liw") 1;			}		for ($joint in $joints)	{		setAttr ($joint + ".liw") 0;		}	}global proc averageWieght (){	string $verts[] = `ls -fl -sl`; 	string $skinCluster = `getSkinClusterFromPoint $verts[0]`;	string $joints[] = `skinCluster -q -inf $skinCluster`;	int $numJoints = `size $joints`;	int $vertCount = `size($verts)`;		for ($joint in $joints)	{		setAttr ($joint + ".liw") 0;	}			for ($joint in $joints)	{		float $weightValue = 0;		float $value = 0;				string $point;		for($vert in $verts)		{			$value = `skinPercent -transform $joint -query $skinCluster $vert`;			$weightValue += $value;		}				float $averageWeight = $weightValue / $vertCount;				for($vert in $verts)		{			skinPercent -transformValue $joint $averageWeight $skinCluster $vert;		}				setAttr ($joint + ".liw") 1;			}		for ($joint in $joints)	{		setAttr ($joint + ".liw") 0;		}	}global proc averageUnlockedWieght (){	string $verts[] = `ls -fl -sl`; 	string $skinCluster = `getSkinClusterFromPoint $verts[0]`;	string $joints[] = `listUnlockdJoints $skinCluster`;	int $numJoints = `size $joints`;	int $vertCount = `size($verts)`;		for ($joint in $joints)	{		setAttr ($joint + ".liw") 0;	}			for ($joint in $joints)	{		float $weightValue = 0;		float $value = 0;				string $point;		for($vert in $verts)		{			$value = `skinPercent -transform $joint -query $skinCluster $vert`;			$weightValue += $value;		}				float $averageWeight = $weightValue / $vertCount;				for($vert in $verts)		{			skinPercent -transformValue $joint $averageWeight $skinCluster $vert;		}				setAttr ($joint + ".liw") 1;			}		for ($joint in $joints)	{		setAttr ($joint + ".liw") 0;		}}global proc splitJointWeghts (){	string $verts[] = `ls -fl -sl`; 	string $skinCluster = `getSkinClusterFromPoint $verts[0]`;	string $allJoints[] = `getInfluencesFromSkinCluster $verts[0]`;	string $joints[] = `listUnlockdJoints $skinCluster`;	int $numJoints = `size $joints`;		if($numJoints == 0)	{		error "There are no unlocked joints";	}	else	{		float $value = 1.00 / $numJoints;				for($joint in $allJoints)		{			setAttr ($joint + ".liw") 0;		}				for($joint in $joints)		{			for ($vert in $verts)			{				skinPercent -transformValue $joint $value $skinCluster $vert;			}			setAttr ($joint + ".liw") 1;		}				for ($joint in $joints)		{			setAttr ($joint + ".liw") 0;		}				for($joint in $allJoints)		{			setAttr ($joint + ".liw") 1;		}	}}global proc blurWeights (){	string $verts[] = `ls -fl -sl`; 	string $skinCluster = `getSkinClusterFromPoint $verts[0]`;	string $joints[] = `skinCluster -q -inf $skinCluster`;	int $numJoints = `size $joints`;	int $vertCount = `size($verts)`;			for ($joint in $joints)	{		setAttr ($joint + ".liw") 0;		}			for ($joint in $joints)	{			float $weightValue = 0;		float $value = 0;		float $meanDiff;		float $meanDiffSum;		float $variance;		float $standardDeviation;		float $pi = 3.1415926535;		float $e = 2.718281828;		float $twoPiDev;		float $twoPiDevSqrt;		float $ProbabilityDensity;		float $ExpNumerator;		float $ExpNumeratorInverse;		float $ExpDenominator;		float $ExpVal;		float $GaussianEval;		float $GaussianMult;		float $currentValue;		float $kernel;		string $point;				for($vert in $verts)		{			$value = `skinPercent -transform $joint -query $skinCluster $vert`;			print ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n";			print ($vert + ".......");			print ($joint + ".......");			print ($value + "\n");			print "this is the sum\n";						$weightValue += $value;		}				print  ($weightValue + "\n");		print ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n";				float $averageWeight = $weightValue / $vertCount;				for ($vert in $verts)						{			$value = `skinPercent -transform $joint -query $skinCluster $vert`;			$meanDiff = $value - $averageWeight;			$meanDiffSqaure = $meanDiff * $meanDiff;			$meanDiffSum += $meanDiffSqaure;		}					$variance = $meanDiffSum / $vertCount;		$standardDeviation = sqrt($variance);					$twoPiDev = ( 2 * $pi * $variance);		$twoPiDevSqrt = `sqrt($twoPiDev)`;		$ProbabilityDensity = 1 / $twoPiDevSqrt ;							for ($vert in $verts)		{			$currentValue = `skinPercent -transform $joint -query $skinCluster $vert`;			$ExpNumerator = ($currentValue * $currentValue);			$ExpDenominator = 2 * $variance;			$ExpVal = (-1 * ($ExpNumerator / $ExpDenominator));						$GaussianMult = `pow $e $ExpVal`;			$GaussianEval = $ProbabilityDensity * $GaussianMult;						print "****************************************\n";			print "****************************************\n";			print "****************************************\n";			print "****************************************\n";			print "this is the vert\t";			print ($vert + "\n");			print "this is the joint\t";			print ($joint  + "\n");			print "this is the value\t";			print ($currentValue + "\n");			print "this is the sum\t";			print ($weightValue + "\n");			print "this is the mean\t";			print ($averageWeight + "\n");			print "This is the variance\t";			print ($variance + "\n");			print "This is the standard deviation\t";			print ($standardDeviation + "\n");			print "this is the denominator\t";			print ($twoPiDev  + "\n");			print "this is the denominator square root\t";			print ($twoPiDevSqrt + "\n");			print "this is the first mulitplier\t";			print ($ProbabilityDensity  + "\n");			print "this is the exponent numerator\t";			print ($ExpNumerator + "\n");			print "this is the exponent denominator\t";			print ($ExpDenominator + "\n");			print "this is the exponent value\t";			print ($ExpVal + "\n");			print "this is the multiplier\t";			print ($GaussianMult + "\n");			print "this is the Gaussian Value\t";			print ($GaussianEval + "\n");			print "****************************************\n";			print "****************************************\n";			print "****************************************\n";			print "****************************************\n";		}								for($joint in $joints)		{			//skinPercent -transformValue $joint $GaussianEval $skinCluster $vert;			setAttr ($joint + ".liw") 1;				}	}}